<!DOCTYPE html>
<html lang="en" class="antialiased">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>QuizApp - <%- quiz.name %></title>
    <meta name="description" content="">
    <meta name="keywords" content="">
    <link href="https://unpkg.com/tailwindcss/dist/tailwind.min.css" rel="stylesheet">
    <link href="https://unpkg.com/@tailwindcss/custom-forms/dist/custom-forms.min.css" rel="stylesheet">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"
        integrity="sha512-qTXRIMyZIFb8iQcfjXWCO8+M5Tbc38Qi5WzdPOYZHIlZpzBHG3L3by84BBBOiRGiEb7KKtAOAs5qYdUiZiQNNQ=="
        crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script src="/public/vendor/vue/vue.js"></script>
    <link rel="stylesheet" href="https://pagecdn.io/lib/font-awesome/5.10.0-11/css/all.min.css"
        integrity="sha256-p9TTWD+813MlLaxMXMbTA7wN/ArzGyW/L7c5+KkjOkM=" crossorigin="anonymous">
    <link href="/public/vendor/snackbar/snackbar.min.css" rel="stylesheet" type="text/css" />

    <style>
        .max-h-64 {
            max-height: 16rem;
        }

        /*Quick overrides of the form input as using the CDN version*/
        .form-input,
        .form-textarea,
        .form-select,
        .form-multiselect {
            background-color: #edf2f7;
        }

        [v-cloak]>* {
            display: none
        }

        [v-cloak]::before {
            content: "Loadingâ€¦"
        }

        .card.answered {
            border-top: #25a725 7px solid;
        }

        .card {
            border-top: #fff 7px solid;
        }
    </style>

</head>

<body class="bg-gray-100 text-gray-900 tracking-wider leading-normal">

    <div id="app" v-cloak>
        <nav id="header" class="bg-white fixed w-full z-10 top-0 shadow">

            <div class="w-full container mx-auto flex flex-wrap items-center justify-between my-4">

                <div class="pl-4 md:pl-0">
                    <a class="flex items-center text-yellow-600 text-base xl:text-xl no-underline hover:no-underline font-extrabold font-sans"
                        href="#">
                        <svg class="fill-current h-6 inline-block text-yellow-600 mr-4"
                            xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20">
                            <path
                                d="M16 2h4v15a3 3 0 0 1-3 3H3a3 3 0 0 1-3-3V0h16v2zm0 2v13a1 1 0 0 0 1 1 1 1 0 0 0 1-1V4h-2zM2 2v15a1 1 0 0 0 1 1h11.17a2.98 2.98 0 0 1-.17-1V2H2zm2 8h8v2H4v-2zm0 4h8v2H4v-2zM4 4h8v4H4V4z" />
                        </svg> QuizApp - <%- quiz.name %>
                    </a>
                </div>

                <div class="pr-0 flex justify-end">
                    <div class="flex relative inline-block float-right">
                        <div class="relative text-sm">
                            {{ timer.value }}
                        </div>
                    </div>

                </div>

            </div>
        </nav>

        <div v-if="isSubmitting"
            class="fixed top-0 left-0 right-0 bottom-0 w-full h-screen z-50 overflow-hidden bg-gray-700 opacity-100 flex flex-col items-center justify-center">
            <div class="loader mb-4">
                <i class="fas fa-circle-notch fa-spin fa-5x text-yellow-600"></i>
            </div>
            <h2 class="text-center text-white text-xl font-semibold">Saving...</h2>
            <p class="w-1/3 text-center text-white">We are saving your answers, hang tight!</p>
        </div>

        <!--Container-->
        <div class="container w-full flex flex-wrap mx-auto px-2 pt-8 lg:pt-16 mt-16">
            <div class="w-full lg:w-1/5 px-6 text-xl text-gray-800 leading-normal">
                <p class="text-base font-bold py-2 lg:pb-6 text-gray-700">Questions</p>
                <div class="block lg:hidden sticky inset-0">
                    <button id="menu-toggle"
                        class="flex w-full justify-end px-3 py-3 bg-white lg:bg-transparent border rounded border-gray-600 hover:border-yellow-600 appearance-none focus:outline-none">
                        <svg class="fill-current h-3 float-right" viewBox="0 0 20 20"
                            xmlns="http://www.w3.org/2000/svg">
                            <path d="M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z" />
                        </svg>
                    </button>
                </div>
                <div class="w-full sticky inset-0 hidden max-h-64 lg:h-auto overflow-x-hidden overflow-y-auto lg:overflow-y-hidden lg:block mt-0 my-2 lg:my-0 border border-gray-400 lg:border-transparent bg-white shadow lg:shadow-none lg:bg-transparent z-20"
                    style="top:6em;" id="menu-content">
                    <div class="flex flex-wrap -mx-4 overflow-hidden sm:-mx-4 md:-mx-3 lg:-mx-3 xl:-mx-3">
                        <div v-for="(question, index) in questions"
                            class="my-4 px-4 w-1/2 overflow-hidden sm:my-4 sm:px-4 sm:w-1/2 md:my-3 md:px-3 md:w-1/3 lg:my-3 lg:px-3 lg:w-1/4 xl:my-3 xl:px-3 xl:w-1/4">
                            <button :data-target="'#question' + (index + 1)" role="button"
                                class="shadow bg-yellow-100 hover:bg-yellow-200 focus:shadow-outline focus:outline-none text-gray-700 font-bold py-2 px-4 rounded mr-4 border-transparent border-b-4">
                                {{index+1}}
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            <!--Section container-->
            <section class="w-full lg:w-4/5">

                <!--Title-->
                <h1
                    class="flex items-center font-sans font-bold break-normal text-gray-700 px-2 text-xl mt-12 lg:mt-0 md:text-2xl">
                    <%- quiz.name %>
                </h1>

                <div class="text-base pl-3 pt-3"><%- quiz.description %></div>


                <div v-for="(question, index) in questions">
                    <singlechoice-component v-if="question.questionType == 'single-choice'" :key="question.id"
                        :question="question" :number="index + 1">
                    </singlechoice-component>
                    <multichoice-component v-if="question.questionType == 'multi-choice'" :key="question.id"
                        :question="question" :number="index + 1">
                    </multichoice-component>
                </div>

                <hr class="bg-gray-300 my-12">

                <!--Card-->
                <div class="p-8 mt-6 lg:mt-0 rounded shadow bg-white">
                    <div class="flex justify-between">
                        <button :disabled="isSaving"
                            class="shadow bg-yellow-100 hover:bg-yellow-200 focus:shadow-outline focus:outline-none text-gray-700 font-bold py-2 px-4 rounded mr-4"
                            type="button" @click="saveAnswers(false)">
                            Save results
                        </button>
                        <button
                            class="shadow bg-yellow-700 hover:bg-yellow-500 focus:shadow-outline focus:outline-none text-white font-bold py-2 px-4 rounded mr-4"
                            type="button" @click="submitQuiz()">
                            Submit all and finish
                        </button>
                    </div>

                </div>
                <!--/Card-->

            </section>
            <!--/Section container-->

            <!--Back link -->
            <div class="w-full lg:w-4/5 lg:ml-auto text-base md:text-sm text-gray-600 px-4 py-24 mb-12">
            </div>

        </div>

    </div>
    <!--/container-->
    <script id="question-singlechoice-template" type="text/x-template">
        <div :id="'question' + number">
            <!--divider-->
            <hr class="bg-gray-300 my-12">

            <div class="flex justify-between">
                <h2 class="font-sans font-bold break-normal text-gray-700 px-2 pb-8 text-xl">Question {{number}}</h2>
                <p class="font-bold">{{question.points}} points</p>
            </div>

            <div id='section5' v-bind:class="{ 'answered': this.question.result != null }" class="card p-8 mt-6 lg:mt-0 rounded shadow bg-white">
                <blockquote class="border-l-4 border-yellow-600 italic my-4 pl-8 md:pl-12">{{question.text}}</blockquote>

                <div class="md:flex mb-6">
                    <div class="pl-10 mt-3">
                        <div class="mt-2" v-for="option in question.answers">
                            <label class="inline-flex items-center">
                                <input type="radio" class="form-radio text-indigo-600" :name="'question_' + number + '_choices'"
                                :value="option.valueId" v-model="question.result"
                                
                                >
                                <span class="ml-2">{{option.value}}</span>
                            </label>
                        </div>
                        <a role="button" class="py-2 text-sm text-gray-600" @click="this.question.result = null">clear answers</a>
                    </div>
                </div>
            </div>
        </div>
    </script>

    <script id="question-multichoice-template" type="text/x-template">
        <div :id="'question' + number">
            <!--divider-->
            <hr class="bg-gray-300 my-12">

            <div class="flex justify-between">
                <h2 class="font-sans font-bold break-normal text-gray-700 px-2 pb-8 text-xl">Question {{number}}</h2>
                <p class="font-bold">{{question.points}} points</p>
            </div>
            
            <div id='section5' v-bind:class="{ 'answered': this.question.result != null && this.question.result.length > 0 }"
                 class="card p-8 mt-6 lg:mt-0 rounded shadow bg-white">
                <blockquote class="border-l-4 border-yellow-600 italic my-4 pl-8 md:pl-12">{{question.text}}</blockquote>

                <div class="md:flex mb-6">
                    <div class="pl-10 mt-3">
                        <div class="mt-2" v-for="option in question.answers">
                            <label class="inline-flex items-center">
                                <input type="checkbox" class="form-checkbox text-indigo-600"
                                 :name="'question_' + number + '_choices'" :value="option.valueId"
                                  v-model="question.result">
                                <span class="ml-2">{{option.value}}</span>
                            </label>
                        </div>
                        <a  role="button" class="py-2 text-sm text-gray-600" @click="this.question.result = []">clear answers</a>
                    </div>
                </div>
            </div>
        </div>
    </script>


    <script>
        var quiz = JSON.parse('<%- JSON.stringify(quiz) %>');
        var candidate = JSON.parse('<%- JSON.stringify(candidate) %>');
        var submission = JSON.parse('<%- JSON.stringify(submission) %>');
        var questions = JSON.parse('<%- JSON.stringify(questions) %>');
        var timer = { value: null };

        Vue.component('singlechoice-component', {
            props: ['question', 'number'],
            template: '#question-singlechoice-template',
            methods: {
                clearAnswer(answer) {
                },
                updateResult(value) {
                    //this.question.result = value;
                    //this.$emit('result-updated', value);
                },

            },
            computed: {
                hasAnswer: function () {
                    return this.question.result != null;
                }
            }
        });

        Vue.component('multichoice-component', {
            props: ['question', 'number'],
            template: '#question-multichoice-template',
            methods: {
                clearAnswer: function (question) {
                },
                updateResult(value) {
                    this.$emit('result-updated', value);
                },
            },
            computed: {
                hasAnswer: function () {
                    return this.question.result != null && this.question.result.length > 0;
                }
            }
        });

        var app = new Vue({
            el: '#app',
            data: {
                quiz,
                candidate,
                submission,
                questions,
                results: [],
                timer,
                isSubmitting: false,
                isSaving: false
            },
            methods: {
                saveAnswers: async function (finish) {
                    this.isSaving = true;
                    var answers = [];
                    questions.forEach(question => {
                        var answer = {
                            questionId: question.id,
                            answer: question.result
                        };
                        answers.push(answer);
                    });

                    var response = await axios.post('/submission/save-results/' + this.submission.token, { answers, finish });
                    var data = response.data;

                    if (!finish) {
                        Snackbar.show({
                            text: 'Answers saved successfully!',
                            pos: 'top-right',
                            actionTextColor: '#b45309'
                        });
                    }
                    this.isSaving = false;
                },
                submitQuiz: async function () {
                    this.isSubmitting = true;
                    setTimeout(async () => {
                        await this.saveAnswers(true);
                        this.isSubmitting = false;
                        window.location = '/submission/end/' + this.submission.token;
                    }, 3000);
                }
            },
            beforeMount() {
                if (this.quiz.timeLimitMinutes) {
                    // Set the date we're counting down to
                    var countDownDate = moment(submission.dateStarted).add(this.quiz.timeLimitMinutes, 'm').toDate();

                    // Update the count down every 1 second
                    var x = setInterval(function () {
                        var now = moment();
                        // Find the distance between now and the count down date
                        var distance = countDownDate - now;

                        // If the timer is finished
                        if (distance < 0) {
                            clearInterval(x);
                            timer.value = '00:00:00';

                            this.submitQuiz();
                            return;
                        }

                        // Time calculations for days, hours, minutes and seconds
                        var hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
                        var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
                        var seconds = Math.floor((distance % (1000 * 60)) / 1000);

                        timer.value = hours + "h " + minutes + "m " + seconds + "s ";
                    }, 1000);
                }
            },
        });
    </script>

    <!-- jQuery -->
    <script type="text/javascript" src="https://code.jquery.com/jquery-3.4.1.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script src="/public/vendor/snackbar/snackbar.min.js"></script>

    <!-- Scroll Spy -->
    <script>
        /* http://jsfiddle.net/LwLBx/ */

        // Cache selectors
        var lastId,
            topMenu = $("#menu-content"),
            topMenuHeight = $("#header").outerHeight(),
            // All list items
            menuItems = topMenu.find("button"),
            // Anchors corresponding to menu items
            scrollItems = menuItems.map(function () {
                var item = $($(this).attr("data-target"));
                if (item.length) { return item; }
            });

        // Bind click handler to menu items
        // so we can get a fancy scroll animation
        menuItems.click(function (e) {
            var target = $(this).attr("data-target"),
                offsetTop = target === "#" ? 0 : $(target).offset().top - topMenuHeight + 1;

            $('html, body').stop().animate({
                scrollTop: offsetTop
            }, 300);

            e.preventDefault();
        });

        // Bind to scroll
        $(window).scroll(function () {
            // Get container scroll position
            var fromTop = $(this).scrollTop() + topMenuHeight;
            // Get id of current scroll item
            var cur = scrollItems.map(function () {
                if ($(this).offset().top < fromTop)
                    return this;
            });
            // Get the id of the current element
            cur = cur[cur.length - 1];
            var id = cur && cur.length ? cur[0].id : "";
            if (lastId !== id) {
                lastId = id;
                // Set/remove active class
                menuItems.removeClass("font-bold border-yellow-600")
                menuItems.filter("[data-target='#" + id + "']").addClass("font-bold border-yellow-600");
            }
        });

    </script>

</body>

</html>